<p><strong>Назначение:</strong> CMake — это кроссплатформенная система автоматической генерации сборочных файлов (Makefile, Visual Studio Solutions и т.д.) для проектов, написанных на C, C++, Fortran и других языках. Она упрощает процесс сборки проектов, абстрагируя детали конкретных инструментов сборки и компиляторов.</p>

<ul>
  <li>Если необходимо собрать проект на разных платформах и компиляторах</li>
  <li>Для организации крупного проекта с несколькими библиотеками и зависимостями</li>
  <li>При подключении сторонних библиотек (Qt, Boost, OpenCV и др.)</li>
  <li>Для настройки юнит-тестов, упаковки, установки и других вспомогательных этапов</li>
</ul>

<ul>
  <li>Унифицированная сборка под разные платформы и IDE</li>
  <li>Гибкость за счёт генераторов и переменных</li>
  <li>Глубокая интеграция со сторонними библиотеками</li>
  <li>Позволяет переиспользовать конфигурации и управлять зависимостями</li>
</ul>

<ul>
  <li>Сложность написания скриптов CMake для новичков</li>
  <li>Иногда неочевидные ошибки на уровне генераторов</li>
  <li>Поведение может отличаться между платформами</li>
  <li>Трудности в отладке больших конфигураций</li>
</ul>

<pre><code># CMakeLists.txt – полный шаблон с комментариями

# 1. Минимальная поддерживаемая версия CMake
cmake_minimum_required(VERSION 3.14)

# 2. Определение проекта, его версии и языков
project(MyProject
    VERSION 1.0.0               # версия библиотеки/приложения
    DESCRIPTION "Краткое описание проекта"
    LANGUAGES C CXX             # какие компиляторы использовать
)

# 3. Опции сборки (можно переопределить при вызове cmake)
option(BUILD_SHARED_LIBS       "Собирать библиотеку как shared (ON) или static (OFF)" ON)
option(ENABLE_TESTS            "Включить сборку и запуск unit-тестов"        ON)
option(USE_EXTERNAL_FOO        "Подключить внешнюю библиотеку FOO"          OFF)

# 4. Установка типа сборки по умолчанию (если не задано)
if(NOT CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE Release CACHE STRING "Тип сборки" FORCE)
endif()

# 5. Стандарты языка и параметры компилятора
set(CMAKE_CXX_STANDARD        17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS       OFF)    # без расширений компилятора
set(CMAKE_POSITION_INDEPENDENT_CODE ON) # для сборки shared/static корректно

# 6. Пути к исходникам и заголовкам
set(SRC_DIR ${CMAKE_CURRENT_SOURCE_DIR}/src)
set(INC_DIR ${CMAKE_CURRENT_SOURCE_DIR}/include)

# 7. Автоматическая поддержка системных переменных установки
include(GNUInstallDirs)  # дает CMAKE_INSTALL_BINDIR, LIBDIR, INCLUDEDIR и т.д.

# 8. Поиск зависимостей
find_package(Threads    REQUIRED)       # std::thread или pthreads
find_package(Qt6        COMPONENTS Core REQUIRED)    # пример Qt6
# find_package(PkgConfig REQUIRED)
# pkg_check_modules(FOO REQUIRED foo)   # если используем pkg-config

# 9. Добавление библиотеки
add_library(${PROJECT_NAME}
    $<BUILD_INTERFACE:${SRC_DIR}/mylib.cpp>
    $<BUILD_INTERFACE:${INC_DIR}/mylib.h>
)
# 9.1. Export макросов для Windows DLL
target_compile_definitions(${PROJECT_NAME}
    PRIVATE ${PROJECT_NAME}_EXPORTS
)

# 9.2. Инклуды и линки
target_include_directories(${PROJECT_NAME}
    PUBLIC  $<BUILD_INTERFACE:${INC_DIR}>
            $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>
    PRIVATE ${CMAKE_CURRENT_BINARY_DIR}  # если используем configure_file
)
target_link_libraries(${PROJECT_NAME}
    PUBLIC  Threads::Threads
            Qt6::Core
    PRIVATE # здесь можно указывать внутренние зависимости
)

# 9.3. Флаги компилятора
target_compile_options(${PROJECT_NAME} PRIVATE
    $<$<CXX_COMPILER_ID:GNU>:-Wall -Wextra -Wpedantic>
    $<$<CXX_COMPILER_ID:MSVC>:/W4>
)

# 10. Генерация конфигурационного хедера
#    при наличии файла include/config.h.in:
#    #cmakedefine USE_EXTERNAL_FOO
configure_file(
    ${INC_DIR}/config.h.in
    ${CMAKE_CURRENT_BINARY_DIR}/config.h
    @ONLY
)

# 11. Исполняемый файл (приложение)
add_executable(${PROJECT_NAME}_app
    ${SRC_DIR}/main.cpp
)
target_link_libraries(${PROJECT_NAME}_app
    PRIVATE ${PROJECT_NAME}
)

# 12. Unit-тесты
if(ENABLE_TESTS)
  include(CTest)               # добавляет команду ctest
  enable_testing()

  find_package(GTest REQUIRED) # GoogleTest
  add_executable(test_${PROJECT_NAME}
      tests/test_main.cpp
  )
  target_link_libraries(test_${PROJECT_NAME}
      PRIVATE ${PROJECT_NAME}
              GTest::gtest
              GTest::gtest_main
  )
  add_test(NAME ${PROJECT_NAME}_unit_tests
           COMMAND test_${PROJECT_NAME})
endif()

# 13. Кастомные команды и таргеты
# Копирование зависимой библиотеки рядом с .exe после сборки
add_custom_command(TARGET ${PROJECT_NAME}_app POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy_if_different
        $<TARGET_FILE:${PROJECT_NAME}>
        $<TARGET_FILE_DIR:${PROJECT_NAME}_app>
)

# Создание отдельной задачи для копирования ресурсов
add_custom_target(copy_resources ALL
    COMMAND ${CMAKE_COMMAND} -E copy_directory
        ${CMAKE_CURRENT_SOURCE_DIR}/resources
        $<TARGET_FILE_DIR:${PROJECT_NAME}_app>/resources
    COMMENT "Копирую ресурсы"
)

# 14. Установка (install)
install(TARGETS ${PROJECT_NAME} ${PROJECT_NAME}_app
    EXPORT   ${PROJECT_NAME}Targets
    RUNTIME  DESTINATION ${CMAKE_INSTALL_BINDIR}    # .exe или .dll
    LIBRARY  DESTINATION ${CMAKE_INSTALL_LIBDIR}     # .so/.dylib
    ARCHIVE  DESTINATION ${CMAKE_INSTALL_LIBDIR}     # .lib
    INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
)

install(DIRECTORY ${INC_DIR}/
    DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
    FILES_MATCHING PATTERN "*.h"
)

# 15. Экспорт конфигурации для find_package()
include(CMakePackageConfigHelpers)
write_basic_package_version_file(
    "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake"
    VERSION ${PROJECT_VERSION}
    COMPATIBILITY AnyNewerVersion
)

install(EXPORT ${PROJECT_NAME}Targets
    FILE        ${PROJECT_NAME}Targets.cmake
    NAMESPACE   ${PROJECT_NAME}::
    DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}
)

install(FILES
    "${CMAKE_CURRENT_SOURCE_DIR}/cmake/${PROJECT_NAME}Config.cmake"
    "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake"
    DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}
)

# 16. Пакетирование (CPack)
include(CPack)
set(CPACK_PACKAGE_NAME        "${PROJECT_NAME}")
set(CPACK_PACKAGE_VENDOR      "YourCompany")
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY "Описание пакета")
set(CPACK_PACKAGE_VERSION     "${PROJECT_VERSION}")
set(CPACK_GENERATOR           "ZIP;TGZ;NSIS")
# можно добавить CPACK_NSIS_DISPLAY_NAME, CPACK_RESOURCE_FILE_LICENSE и т.д.

# Конец CMakeLists.txt
</code></pre>
